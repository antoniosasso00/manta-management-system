generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String               @id @default(cuid())
  email                    String               @unique
  name                     String?
  password                 String
  role                     UserRole             @default(OPERATOR)
  isActive                 Boolean              @default(true)
  image                    String?              // Profile photo path/URL
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  departmentId             String?
  departmentRole           DepartmentRole?
  accounts                 Account[]
  auditLogs                AuditLog[]
  capaAssignments          CorrectiveAction[]   @relation("CAPAAssignee")
  capaVerifications        CorrectiveAction[]   @relation("CAPAVerifier")
  nonConformityAssignments NonConformity[]      @relation("NCAssignee")
  nonConformityReports     NonConformity[]      @relation("NCReporter")
  passwordResetTokens      PasswordResetToken[]
  odlEvents                ProductionEvent[]
  certificateApproved      QualityCertificate[] @relation("CertificateApprover")
  certificateIssued        QualityCertificate[] @relation("CertificateIssuer")
  qualityInspections       QualityInspection[]  @relation("QualityInspector")
  qualitySignatures        QualityInspection[]  @relation("QualitySigner")
  sessions                 Session[]
  department               Department?          @relation(fields: [departmentId], references: [id])

  @@index([email, isActive])
  @@index([role])
  @@index([departmentId, departmentRole])
  @@index([createdAt])
  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt, used])
  @@index([createdAt])
  @@map("password_reset_tokens")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model Part {
  id                   String                 @id @default(cuid())
  partNumber           String                 @unique
  description          String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  gammaId              String?
  lastSyncAt           DateTime?
  syncStatus           SyncStatus             @default(SUCCESS)
  defaultCuringCycleId String?
  defaultVacuumLines   Int?
  odls                 ODL[]
  cncConfig            PartControlloNumerico? @relation("PartCNCConfig")
  honeycombConfig      PartHoneycomb?         @relation("PartHoneycombConfig")
  assemblyConfig       PartMontaggio?         @relation("PartAssemblyConfig")
  engineConfig         PartMotori?            @relation("PartEngineConfig")
  partTools            PartTool[]
  coatingConfig        PartVerniciatura?      @relation("PartCoatingConfig")
  autoclaveConfig      PartAutoclave?         @relation("PartAutoclaveConfig")
  cleanroomConfig      PartCleanroom?         @relation("PartCleanroomConfig")
  ndiConfig            PartNDI?               @relation("PartNDIConfig")
  defaultCuringCycle   CuringCycle?           @relation("DefaultCuringCycle", fields: [defaultCuringCycleId], references: [id])
  qualityPlans         QualityControlPlan[]
  timeStatistics       PartTimeStatistics[]

  @@index([partNumber])
  @@index([gammaId])
  @@index([defaultCuringCycleId])
  @@map("parts")
}

model ODL {
  id                     String               @id @default(cuid())
  odlNumber              String               @unique
  partId                 String
  quantity               Int
  priority               Priority             @default(NORMAL)
  status                 ODLStatus            @default(CREATED)
  qrCode                 String               @unique
  expectedCompletionDate DateTime?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  gammaId                String?
  lastSyncAt             DateTime?
  syncStatus             SyncStatus           @default(SUCCESS)
  curingCycleId          String?
  vacuumLines            Int?
  autoclaveLoadItems     AutoclaveLoadItem[]
  nonConformities        NonConformity[]
  curingCycle            CuringCycle?         @relation("ODLCuringCycle", fields: [curingCycleId], references: [id])
  part                   Part                 @relation(fields: [partId], references: [id])
  events                 ProductionEvent[]
  qualityCertificates    QualityCertificate[]
  qualityInspections     QualityInspection[]
  timeMetrics            TimeMetrics[]

  @@index([qrCode])
  @@index([partId, status])
  @@index([status, priority, createdAt])
  @@index([gammaId])
  @@index([curingCycleId])
  @@index([createdAt])
  @@map("odls")
}

model ProductionEvent {
  id           String     @id @default(cuid())
  odlId        String
  departmentId String
  eventType    EventType
  timestamp    DateTime   @default(now())
  userId       String
  notes        String?
  duration     Int?
  isAutomatic  Boolean    @default(false)
  department   Department @relation(fields: [departmentId], references: [id])
  odl          ODL        @relation(fields: [odlId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@index([odlId, timestamp])
  @@index([departmentId, eventType, timestamp])
  @@index([userId, timestamp])
  @@index([timestamp, isAutomatic])
  @@index([odlId, departmentId, eventType])
  @@map("production_events")
}

model Department {
  id                  String                @id @default(cuid())
  code                String                @unique
  name                String
  type                DepartmentType
  isActive            Boolean               @default(true)
  autoclaves          Autoclave[]
  events              ProductionEvent[]
  users               User[]
  timeMetrics         TimeMetrics[]
  partTimeStatistics  PartTimeStatistics[]

  @@map("departments")
}

model Autoclave {
  id           String          @id @default(cuid())
  code         String          @unique
  name         String
  departmentId String
  maxLength    Float
  maxWidth     Float
  maxHeight    Float
  vacuumLines  Int
  isActive     Boolean         @default(true)
  loads        AutoclaveLoad[]
  department   Department      @relation(fields: [departmentId], references: [id])

  @@map("autoclaves")
}

model AutoclaveLoad {
  id            String              @id @default(cuid())
  loadNumber    String              @unique
  autoclaveId   String
  curingCycleId String
  plannedStart  DateTime
  actualStart   DateTime?
  plannedEnd    DateTime
  actualEnd     DateTime?
  status        LoadStatus          @default(DRAFT)
  layoutData    Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  loadItems     AutoclaveLoadItem[]
  autoclave     Autoclave           @relation(fields: [autoclaveId], references: [id])
  curingCycle   CuringCycle         @relation(fields: [curingCycleId], references: [id])

  @@index([autoclaveId, status, plannedStart])
  @@index([status, plannedStart])
  @@index([curingCycleId, status])
  @@index([plannedStart, plannedEnd])
  @@map("autoclave_loads")
}

model AutoclaveLoadItem {
  id              String        @id @default(cuid())
  odlId           String
  autoclaveLoadId String
  position        Json?
  addedAt         DateTime      @default(now())
  previousStatus  ODLStatus?
  autoclaveLoad   AutoclaveLoad @relation(fields: [autoclaveLoadId], references: [id], onDelete: Cascade)
  odl             ODL           @relation(fields: [odlId], references: [id], onDelete: Cascade)

  @@unique([odlId, autoclaveLoadId])
  @@index([autoclaveLoadId])
  @@map("autoclave_load_items")
}

model GammaSyncLog {
  id             String     @id @default(cuid())
  fileName       String
  fileType       String
  entityType     String
  syncStatus     SyncStatus
  recordsRead    Int        @default(0)
  recordsSynced  Int        @default(0)
  recordsSkipped Int        @default(0)
  errorMessage   String?
  syncedAt       DateTime   @default(now())

  @@index([fileType, syncedAt])
  @@map("gamma_sync_logs")
}

model Tool {
  id             String     @id @default(cuid())
  toolPartNumber String     @unique
  description    String?
  base           Float
  height         Float
  weight         Float?
  material       String?
  valveCount     Int        @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  partTools      PartTool[]

  @@index([toolPartNumber])
  @@map("tools")
}

model PartTool {
  id     String @id @default(cuid())
  partId String
  toolId String
  part   Part   @relation(fields: [partId], references: [id], onDelete: Cascade)
  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([partId, toolId])
  @@index([partId])
  @@index([toolId])
  @@map("part_tools")
}

model CuringCycle {
  id                String          @id @default(cuid())
  code              String          @unique
  name              String
  description       String?
  phase1Temperature Float
  phase1Pressure    Float
  phase1Duration    Int
  phase2Temperature Float?
  phase2Pressure    Float?
  phase2Duration    Int?
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  autoclaveLoads    AutoclaveLoad[]
  odls              ODL[]           @relation("ODLCuringCycle")
  defaultParts      Part[]          @relation("DefaultCuringCycle")
  partAutoclaves    PartAutoclave[]

  @@index([code])
  @@map("curing_cycles")
}

model AuditLog {
  id         String      @id @default(cuid())
  action     AuditAction
  resource   String
  resourceId String?
  userId     String
  userEmail  String
  details    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])

  @@index([resource, resourceId, timestamp])
  @@index([action, timestamp])
  @@index([userId, timestamp])
  @@index([timestamp])
  @@map("audit_logs")
}

model QualityControlPlan {
  id                 String              @id @default(cuid())
  partId             String
  version            String              @default("1.0")
  title              String
  description        String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  createdBy          String
  inspectionType     QCInspectionType
  frequency          QCFrequency
  sampleSize         Int                 @default(1)
  acceptanceCriteria Json
  part               Part                @relation(fields: [partId], references: [id])
  inspections        QualityInspection[]

  @@index([partId, isActive])
  @@index([inspectionType, isActive])
  @@index([createdAt])
  @@map("quality_control_plans")
}

model QualityInspection {
  id                String             @id @default(cuid())
  planId            String
  odlId             String
  inspectorId       String
  status            QCStatus           @default(PENDING)
  startedAt         DateTime?
  completedAt       DateTime?
  result            QCResult?
  measurements      Json?
  notes             String?
  attachments       String[]           @default([])
  certificateNumber String?            @unique
  signedBy          String?
  signedAt          DateTime?
  nonConformities   NonConformity[]
  inspector         User               @relation("QualityInspector", fields: [inspectorId], references: [id])
  odl               ODL                @relation(fields: [odlId], references: [id])
  plan              QualityControlPlan @relation(fields: [planId], references: [id])
  signer            User?              @relation("QualitySigner", fields: [signedBy], references: [id])

  @@index([odlId, status])
  @@index([inspectorId, status])
  @@index([completedAt])
  @@index([certificateNumber])
  @@map("quality_inspections")
}

model NonConformity {
  id           String             @id @default(cuid())
  inspectionId String?
  odlId        String
  reportedBy   String
  type         NCType
  severity     NCSeverity
  category     NCCategory
  title        String
  description  String
  rootCause    String?
  status       NCStatus           @default(OPEN)
  detectedAt   DateTime           @default(now())
  assignedTo   String?
  dueDate      DateTime?
  actions      CorrectiveAction[]
  assignee     User?              @relation("NCAssignee", fields: [assignedTo], references: [id])
  inspection   QualityInspection? @relation(fields: [inspectionId], references: [id])
  odl          ODL                @relation(fields: [odlId], references: [id])
  reporter     User               @relation("NCReporter", fields: [reportedBy], references: [id])

  @@index([odlId, status])
  @@index([assignedTo, status])
  @@index([severity, status])
  @@index([detectedAt])
  @@map("non_conformities")
}

model CorrectiveAction {
  id              String        @id @default(cuid())
  nonConformityId String
  type            CAPAType
  title           String
  description     String
  plannedAction   String
  dueDate         DateTime
  assignedTo      String
  status          CAPAStatus    @default(PLANNED)
  actualAction    String?
  completedAt     DateTime?
  verifiedBy      String?
  verifiedAt      DateTime?
  effectiveness   String?
  followUpDate    DateTime?
  assignee        User          @relation("CAPAAssignee", fields: [assignedTo], references: [id])
  nonConformity   NonConformity @relation(fields: [nonConformityId], references: [id])
  verifier        User?         @relation("CAPAVerifier", fields: [verifiedBy], references: [id])

  @@index([nonConformityId])
  @@index([assignedTo, status])
  @@index([dueDate, status])
  @@index([completedAt])
  @@map("corrective_actions")
}

model QualityCertificate {
  id                String    @id @default(cuid())
  odlId             String
  certificateNumber String    @unique
  title             String
  description       String?
  conformityStatus  Boolean   @default(false)
  standardsRef      String[]  @default([])
  issuedBy          String
  approvedBy        String?
  issuedAt          DateTime  @default(now())
  approvedAt        DateTime?
  documentPath      String?
  approver          User?     @relation("CertificateApprover", fields: [approvedBy], references: [id])
  issuer            User      @relation("CertificateIssuer", fields: [issuedBy], references: [id])
  odl               ODL       @relation(fields: [odlId], references: [id])

  @@index([odlId])
  @@index([certificateNumber])
  @@index([issuedAt])
  @@index([conformityStatus])
  @@map("quality_certificates")
}

model PartHoneycomb {
  id                  String        @id @default(cuid())
  partId              String        @unique
  coreType            HoneycombType
  cellSize            Float
  coreDensity         Float
  coreThickness       Float
  skinMaterial        String?
  skinThickness       Float?
  adhesiveType        String
  cureTemperature     Float
  cureTime            Int
  pressure            Float
  bondStrength        Float?
  compressionStrength Float?
  setupTimeMinutes    Int?
  cycleTimeMinutes    Int?
  skillLevel          SkillLevel    @default(BASIC)
  part                Part          @relation("PartHoneycombConfig", fields: [partId], references: [id])

  @@index([partId])
  @@index([coreType])
  @@map("part_honeycomb")
}

model PartControlloNumerico {
  id                 String          @id @default(cuid())
  partId             String          @unique
  materialType       CNCMaterialType
  toolingRequired    String[]
  programmingTime    Int?
  setupTime          Int?
  cycleTime          Int?
  toleranceClass     ToleranceClass  @default(STANDARD)
  surfaceFinish      String?
  compatibleMachines String[]
  priority           Int             @default(1)
  dimensionalChecks  Json
  requiredInspection String?
  part               Part            @relation("PartCNCConfig", fields: [partId], references: [id])

  @@index([partId])
  @@index([materialType])
  @@map("part_controllo_numerico")
}

model PartMontaggio {
  id               String       @id @default(cuid())
  partId           String       @unique
  assemblyType     AssemblyType
  componentCount   Int
  assemblyTime     Int?
  testingTime      Int?
  requiredParts    Json
  requiredTools    String[]
  requiredFixtures String[]
  assemblySequence Json
  testProcedure    String?
  qualityChecks    String[]
  part             Part         @relation("PartAssemblyConfig", fields: [partId], references: [id])

  @@index([partId])
  @@index([assemblyType])
  @@map("part_montaggio")
}

model PartVerniciatura {
  id               String          @id @default(cuid())
  partId           String          @unique
  coatingType      CoatingType
  primerRequired   Boolean         @default(false)
  coatLayers       Int             @default(1)
  surfacePrep      SurfacePrepType
  cleaningRequired Boolean         @default(true)
  maskingRequired  Boolean         @default(false)
  sprayPattern     String?
  cureTemperature  Float?
  cureTime         Int?
  dryTime          Int
  thicknessCheck   Boolean         @default(true)
  adhesionTest     Boolean         @default(false)
  colorMatch       String?
  part             Part            @relation("PartCoatingConfig", fields: [partId], references: [id])

  @@index([partId])
  @@index([coatingType])
  @@map("part_verniciatura")
}

model PartAutoclave {
  id             String       @id @default(cuid())
  partId         String       @unique
  curingCycleId  String
  vacuumLines    Int
  setupTime      Int?         // Tempo setup in minuti
  loadPosition   String?      // Posizione preferita nel carico
  notes          String?      // Note specifiche per il part
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  part           Part         @relation("PartAutoclaveConfig", fields: [partId], references: [id])
  curingCycle    CuringCycle  @relation(fields: [curingCycleId], references: [id])
  
  @@index([partId])
  @@index([curingCycleId])
  @@map("part_autoclave")
}

model PartCleanroom {
  id                String    @id @default(cuid())
  partId            String    @unique
  layupSequence     Json?     // Sequenza strati composito
  fiberOrientation  String[]  // Orientamenti fibre [0°, 45°, 90°, etc]
  resinType         String?   // Tipo resina
  prepregCode       String?   // Codice prepreg
  roomTemperature   Float?    // Temperatura stanza richiesta
  humidity          Float?    // Umidità richiesta %
  shelfLife         Int?      // Vita utile materiale in giorni
  setupTime         Int?      // Tempo setup in minuti
  cycleTime         Int?      // Tempo ciclo in minuti
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  part              Part      @relation("PartCleanroomConfig", fields: [partId], references: [id])
  
  @@index([partId])
  @@map("part_cleanroom")
}

model PartNDI {
  id                String    @id @default(cuid())
  partId            String    @unique
  inspectionMethod  String[]  // Metodi: ultrasuoni, raggi X, termografia
  acceptanceCriteria Json?    // Criteri accettazione difetti
  criticalAreas     Json?     // Aree critiche da ispezionare
  inspectionTime    Int?      // Tempo ispezione in minuti
  requiredCerts     String[]  // Certificazioni richieste operatore
  calibrationReq    String?   // Requisiti calibrazione strumenti
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  part              Part      @relation("PartNDIConfig", fields: [partId], references: [id])
  
  @@index([partId])
  @@map("part_ndi")
}


model PartMotori {
  id               String     @id @default(cuid())
  partId           String     @unique
  engineType       EngineType
  powerRating      Float?
  rpmRange         String?
  fuelType         FuelType?
  assemblyTime     Int?
  testingTime      Int?
  burnInTime       Int?
  compressionTest  Boolean    @default(false)
  leakTest         Boolean    @default(true)
  performanceTest  Boolean    @default(true)
  vibrationTest    Boolean    @default(false)
  certificationReq String[]
  documentationReq String[]
  part             Part       @relation("PartEngineConfig", fields: [partId], references: [id])

  @@index([partId])
  @@index([engineType])
  @@map("part_motori")
}

enum UserRole {
  ADMIN
  SUPERVISOR
  OPERATOR
}

enum DepartmentRole {
  CAPO_REPARTO
  CAPO_TURNO
  OPERATORE
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ODLStatus {
  CREATED
  IN_HONEYCOMB
  HONEYCOMB_COMPLETED
  IN_CLEANROOM
  CLEANROOM_COMPLETED
  IN_CONTROLLO_NUMERICO
  CONTROLLO_NUMERICO_COMPLETED
  IN_MONTAGGIO
  MONTAGGIO_COMPLETED
  IN_AUTOCLAVE
  AUTOCLAVE_COMPLETED
  IN_NDI
  NDI_COMPLETED
  IN_VERNICIATURA
  VERNICIATURA_COMPLETED
  IN_MOTORI
  MOTORI_COMPLETED
  IN_CONTROLLO_QUALITA
  CONTROLLO_QUALITA_COMPLETED
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum EventType {
  ENTRY
  EXIT
  PAUSE
  RESUME
  NOTE
}

enum DepartmentType {
  HONEYCOMB              // Separate process - honeycomb core preparation
  CLEANROOM              // Main flow #1 - clean room lamination
  CONTROLLO_NUMERICO     // Main flow #3 - CNC machining
  MONTAGGIO              // Main flow #5 - assembly
  AUTOCLAVE              // Main flow #2 - curing process
  NDI                    // Main flow #4 - non-destructive inspection
  VERNICIATURA           // Main flow #6 - coating/painting
  MOTORI                 // Separate process - motor assembly
  CONTROLLO_QUALITA      // Quality control
  OTHER                  // Generic/other departments
}

enum LoadStatus {
  DRAFT
  READY
  IN_CURE
  COMPLETED
  RELEASED
  CANCELLED
}

enum SyncStatus {
  SUCCESS
  PARTIAL
  FAILED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  BULK_UPDATE
  BULK_DELETE
  EXPORT
  IMPORT
  LOGIN
  LOGOUT
  PASSWORD_RESET
}

enum QCInspectionType {
  DIMENSIONAL
  VISUAL
  FUNCTIONAL
  MATERIAL
  SURFACE
  ASSEMBLY
  FINAL
}

enum QCFrequency {
  EVERY_PIECE
  FIRST_PIECE
  SAMPLE
  PERIODIC
  FINAL_ONLY
}

enum QCStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum QCResult {
  PASS
  FAIL
  CONDITIONAL
  RECHECK
}

enum NCType {
  DIMENSIONAL
  VISUAL
  FUNCTIONAL
  MATERIAL
  PROCESS
  DOCUMENTATION
}

enum NCSeverity {
  CRITICAL
  MAJOR
  MINOR
  COSMETIC
}

enum NCCategory {
  CUSTOMER_IMPACT
  SAFETY
  REGULATORY
  INTERNAL
  SUPPLIER
}

enum NCStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  VERIFIED
  CLOSED
}

enum CAPAType {
  CORRECTIVE
  PREVENTIVE
  IMPROVEMENT
}

enum CAPAStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  VERIFIED
  CLOSED
  OVERDUE
}

enum HoneycombType {
  ALUMINUM_3_16
  ALUMINUM_1_4
  ALUMINUM_3_8
  NOMEX_3_16
  NOMEX_1_4
  NOMEX_3_8
  CARBON_3_16
  CARBON_1_4
}

enum SkillLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CNCMaterialType {
  ALUMINUM
  CARBON_FIBER
  STEEL
  TITANIUM
  COMPOSITE
  PLASTIC
}

enum ToleranceClass {
  ROUGH
  STANDARD
  FINE
  PRECISION
  HIGH_PRECISION
}

enum AssemblyType {
  MECHANICAL
  BONDED
  WELDED
  RIVETED
  HYBRID
}

enum CoatingType {
  PRIMER
  BASE_COAT
  CLEAR_COAT
  POWDER_COAT
  ANODIZING
  CHEMICAL_CONVERSION
}

enum SurfacePrepType {
  DEGREASING
  SANDING
  BLASTING
  ETCHING
  POLISHING
}

enum EngineType {
  PISTON
  TURBOPROP
  TURBOJET
  TURBOFAN
  ELECTRIC
  HYBRID
}

enum FuelType {
  AVGAS_100LL
  JET_A1
  DIESEL
  ELECTRIC
  HYDROGEN
}

model TimeMetrics {
  id                String     @id @default(cuid())
  odlId             String
  departmentId      String
  // Tempi in minuti
  advancementTime   Int?       // Tempo totale ENTRY → EXIT (include pause)
  workingTime       Int?       // Tempo lavorazione (esclude pause)
  waitingTime       Int?       // Tempo attesa da reparto precedente
  // Metadati
  entryTimestamp    DateTime?  // ENTRY event timestamp
  exitTimestamp     DateTime?  // EXIT event timestamp
  pauseDuration     Int        @default(0) // Somma pause in minuti
  isCompleted       Boolean    @default(false) // Reparto completato
  calculatedAt      DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relazioni
  odl               ODL        @relation(fields: [odlId], references: [id], onDelete: Cascade)
  department        Department @relation(fields: [departmentId], references: [id])
  
  @@unique([odlId, departmentId]) // Un record per ODL per reparto
  @@index([odlId])
  @@index([departmentId, isCompleted])
  @@index([calculatedAt])
  @@map("time_metrics")
}

model PartTimeStatistics {
  id                     String     @id @default(cuid())
  partId                 String
  departmentId           String
  // Statistiche aggregate (in minuti)
  avgAdvancementTime     Float?
  avgWorkingTime         Float?
  avgWaitingTime         Float?
  // Contatori per calcolo media
  completedODLCount      Int        @default(0)
  totalAdvancementTime   Int        @default(0)
  totalWorkingTime       Int        @default(0)
  totalWaitingTime       Int        @default(0)
  // Metadati
  lastUpdated            DateTime   @updatedAt
  
  // Relazioni
  part                   Part       @relation(fields: [partId], references: [id], onDelete: Cascade)
  department            Department  @relation(fields: [departmentId], references: [id])
  
  @@unique([partId, departmentId])
  @@index([partId])
  @@index([departmentId])
  @@map("part_time_statistics")
}
