{
  "permissions": {
    "allow": [
      "Bash(npm run:*)",
      "Bash(npm install:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "WebFetch(domain:github.com)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(sed:*)",
      "Bash(docker compose:*)",
      "Bash(curl:*)",
      "Bash(ss:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(ss:*)",
      "Bash(env)",
      "Bash(pkill:*)",
      "Bash(PORT=3000 npm run dev)",
      "Bash(docker exec:*)",
      "Bash(REDIS_URL=\"redis://localhost:6379\" PORT=3000 npm run dev)",
      "Bash(timeout 5 curl http://localhost:3000)",
      "Bash(docker-compose:*)",
      "Bash(docker compose:*)",
      "Bash(lsof:*)",
      "Bash(cat:*)",
      "Bash(redis-cli:*)",
      "Bash(kill:*)",
      "Bash(echo)",
      "Bash(docker-compose:*)",
      "Bash(lsof:*)",
      "Bash(wget:*)",
      "Bash(find:*)",
      "Bash(rg:*)",
      "Bash(chmod:*)",
      "Bash(rg:*)",
      "Bash(./scripts/start.sh:*)",
      "Bash(git push:*)",
      "Bash(ls:*)",
      "Bash(npx tsc:*)",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(DEBUG=*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -d mes_aerospazio -c \"\\dt\")",
      "Bash(npx prisma:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(-w \"\\n\\nStatus: %{http_code}\\n\")",
      "Bash(./test-api.js)",
      "Bash(claude doctor)",
      "WebFetch(domain:mui.com)",
      "Bash(claude config get:*)",
      "Bash(cut:*)",
      "Bash(./start-dev.sh:*)",
      "Bash(cp:*)",
      "Bash(npx next dev:*)",
      "Bash(timeout 15 npm run dev -- -p 3001)",
      "Bash(./scripts/migrate-grid-v7.sh:*)",
      "Bash(npx tsx:*)",
      "Bash(python tests/test_optimization.py)",
      "Bash(python3:*)",
      "Bash(docker logs:*)",
      "Bash(NETLIFY=true npx tsx -e \"\nconst config = require(''./next.config.ts'');\nconsole.log(''NODE_ENV:'', process.env.NODE_ENV);\nconsole.log(''NETLIFY:'', process.env.NETLIFY);\nconsole.log(''Output setting:'', config.default?.output);\n\")",
      "Bash(NODE_ENV=production NETLIFY=true npx tsx -e \"\nconst config = require(''./next.config.ts'');\nconsole.log(''NODE_ENV:'', process.env.NODE_ENV);\nconsole.log(''NETLIFY:'', process.env.NETLIFY);\nconsole.log(''Output setting:'', config.default?.output);\nconsole.log(''Condition result:'', process.env.NODE_ENV === ''production'' && !process.env.NETLIFY);\n\")",
      "Bash(fuser:*)",
      "Bash(docker volume rm:*)",
      "Bash(./scripts/dev/start-dev.sh:*)",
      "Bash(npx:*)",
      "Bash(./tests/simulate-qr-workflow.sh:*)"
    ],
    "deny": []
  }
}